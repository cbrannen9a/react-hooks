{"version":3,"sources":["constants/routes.js","components/Home.js","components/withHooks/useState.js","serviceWorker.js"],"names":["routes","Home","react_default","a","createElement","className","Link","to","UseState","_useState","useState","_useState2","Object","slicedToArray","count","setCount","onClick","UseStateII","props","_useState3","_useState4","UseStateIII","_useState5","_useState6","UseStateIV","_useState7","_useState8","_useState9","_useState10","factor","setFactor","updateCount","+","*","-","/","map","f","key","Math","round","random","o","useStateStrings"],"mappings":"iMAAaA,EACN,IADMA,EAEN,gBAFMA,EAGF,yBCYIC,EAVF,WACZ,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEtBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACjBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAIP,GAAV,4ECNUQ,EAAW,WAAM,IAAAC,EAGHC,mBAAS,GAHNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGtBK,EAHsBH,EAAA,GAGfI,EAHeJ,EAAA,GAM7B,OACCT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,wBAAgBU,EAAhB,UACAZ,EAAAC,EAAAC,cAAA,UACCC,UAAU,SACVW,QAAS,kBAAMD,EAASD,EAAQ,KAFjC,cASUG,EAAa,SAACC,GAAU,IAAAC,EACVT,mBAASQ,EAAMJ,OADLM,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAC7BL,EAD6BM,EAAA,GACtBL,EADsBK,EAAA,GAGpC,OACClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,wBAAgBU,EAAhB,UACAZ,EAAAC,EAAAC,cAAA,UACCC,UAAU,SACVW,QAAS,kBAAMD,EAASD,EAAQ,KAFjC,cASUO,EAAc,WAAM,IAAAC,EACNZ,mBAAS,GADHa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GACzBR,EADyBS,EAAA,GAClBR,EADkBQ,EAAA,GAQhC,OACCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,wBAAgBU,EAAhB,UACAZ,EAAAC,EAAAC,cAAA,UACCC,UAAU,SACVW,QAAS,WATXD,EAASD,EADsB,GAAbA,EAAQ,MAQzB,cASUU,EAAa,WAAM,IAAAC,EACLf,mBAAS,GADJgB,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GACxBX,EADwBY,EAAA,GACjBX,EADiBW,EAAA,GAAAC,EAEHjB,mBAAS,GAFNkB,EAAAhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,GAExBE,EAFwBD,EAAA,GAEhBE,EAFgBF,EAAA,GAOzBG,EAAc,CACnBC,IAAK,WAAQjB,EAASD,EAAQe,IAC9BI,IAAK,WAAQlB,EAASD,EAAQe,IAC9BK,IAAK,WAAQnB,EAASD,EAAQe,IAC9BM,IAAK,WAAQpB,EAASD,EAAQe,KAU/B,OACC3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdH,EAAAC,EAAAC,cAAA,8CACAF,EAAAC,EAAAC,cAAA,wBAAgBU,EAAhB,UApBc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,gBAsBjCsB,IAAI,SAAAC,GAAC,OAAInC,EAAAC,EAAAC,cAAA,UAChBC,UAAU,SACViC,IAAKD,EACLrB,QAAS,kBAbJc,EADO,kBADMD,EAeUQ,GAbbE,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAElCZ,GAJG,IAACA,IAgBjBQ,KAEHnC,EAAAC,EAAAC,cAAA,WA3BgB,CAAC,IAAK,IAAK,IAAK,KA6BpBgC,IAAI,SAAAM,GAAC,OAAIxC,EAAAC,EAAAC,cAAA,UAClBC,UAAU,SACViC,IAAKI,EACL1B,QAAS,kBAAMe,EAAYW,OAC1BA,EAAGb,MAIP3B,EAAAC,EAAAC,cAAA,UACCC,UAAU,SACVW,QAAS,kBAAMD,EAAS,KAFzB,WASU4B,EACT,udADSA,muKCzGb","file":"static/js/main.dfd2cea9.chunk.js","sourcesContent":["export const routes = {\r\n\tBASE: '/',\r\n\tHOME: '/react-hooks/',\r\n\tUSESTATE: '/react-hooks/useState/'\r\n\r\n};","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { routes } from '../constants/routes';\r\n\r\nconst Home = () => {\r\n\treturn (<div className='App-header'>\r\n\r\n\t\t<button className='button'>\r\n\t\t\t<Link to={routes.USESTATE}>UseState</Link>\r\n\t\t</button>\r\n\t</div>\r\n\t);\r\n};\r\n\r\nexport default Home;","/* eslint-disable no-multi-str */\r\nimport React, { useState } from 'react';\r\n\r\nexport const UseState = () => {\r\n\t//Declare state value of count and setCount function to update\r\n\t//set the initial value of count as 0\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\t//setCount function \r\n\treturn (\r\n\t\t<div className='content'>\r\n\t\t\t<h4>UseState</h4>\r\n\t\t\t<p>You clicked {count} times</p>\r\n\t\t\t<button\r\n\t\t\t\tclassName='button'\r\n\t\t\t\tonClick={() => setCount(count + 1)}>\r\n\t\t\t\tClick me\r\n      \t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const UseStateII = (props) => {\r\n\tconst [count, setCount] = useState(props.count);\r\n\r\n\treturn (\r\n\t\t<div className='content'>\r\n\t\t\t<h4>UseState with props</h4>\r\n\t\t\t<p>You clicked {count} times</p>\r\n\t\t\t<button\r\n\t\t\t\tclassName='button'\r\n\t\t\t\tonClick={() => setCount(count + 1)}>\r\n\t\t\t\tClick me\r\n      \t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const UseStateIII = () => {\r\n\tconst [count, setCount] = useState(0);\r\n\r\n\tconst updateCount = () => {\r\n\t\tlet powerCount = (count + 1) * 2;\r\n\t\tsetCount(count + powerCount);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='content'>\r\n\t\t\t<h4>UseState with function</h4>\r\n\t\t\t<p>You clicked {count} times</p>\r\n\t\t\t<button\r\n\t\t\t\tclassName='button'\r\n\t\t\t\tonClick={() => updateCount()}>\r\n\t\t\t\tClick me\r\n      \t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const UseStateIV = () => {\r\n\tconst [count, setCount] = useState(0);\r\n\tconst [factor, setFactor] = useState(1);\r\n\r\n\tconst factors = [1, 2, 3, 4, 5, 6, 7, 8, 9, 'ðŸ¦„'];\r\n\tconst operators = ['+', '*', '-', '/'];\r\n\r\n\tconst updateCount = {\r\n\t\t'+': () => { setCount(count + factor); },\r\n\t\t'*': () => { setCount(count * factor); },\r\n\t\t'-': () => { setCount(count - factor); },\r\n\t\t'/': () => { setCount(count / factor); }\r\n\t};\r\n\r\n\tconst updateFactor = (factor) => {\r\n\t\tif (factor === 'ðŸ¦„') {\r\n\t\t\treturn setFactor(Math.round(Math.random() * 1000, 0));\r\n\t\t}\r\n\t\treturn setFactor(factor);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='content'>\r\n\t\t\t<h4>UseState with multiple functions</h4>\r\n\t\t\t<p>You clicked {count} times</p>\r\n\t\t\t{\r\n\t\t\t\tfactors.map(f => <button\r\n\t\t\t\t\tclassName='button'\r\n\t\t\t\t\tkey={f}\r\n\t\t\t\t\tonClick={() => updateFactor(f)}>\r\n\t\t\t\t\t{f}\r\n\t\t\t\t</button>)}\r\n\t\t\t<div>\r\n\t\t\t\t{\r\n\t\t\t\t\toperators.map(o => <button\r\n\t\t\t\t\t\tclassName='button'\r\n\t\t\t\t\t\tkey={o}\r\n\t\t\t\t\t\tonClick={() => updateCount[o]()} >\r\n\t\t\t\t\t\t{o}{factor}\r\n\t\t\t\t\t</button>)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<button\r\n\t\t\t\tclassName='button'\r\n\t\t\t\tonClick={() => setCount(0)}>\r\n\t\t\t\tReset\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport const useStateStrings = {\r\n\tI: 'export const UseState = () => {\\n\\\r\n\t//Declare state value of count and setCount function to update\\n\\\r\n\t//set the initial value of count as 0\\n\\\r\n\tconst [count, setCount] = useState(0);\\n\\\r\n\\n\\\r\n\t//setCount function \\n\\\r\n\treturn(\\n\\\r\n\t\t<div className = \"content\" >\\n\\\r\n\t\t\t<h4>UseState</h4>\\n\\\r\n\t\t\t<p>You clicked {count} times</p>\\n\\\r\n\t\t\t<button\\n\\\r\n\t\t\t\tclassName=\"button\"\\n\\\r\n\t\t\t\tonClick={() => setCount(count + 1)}>\\n\\\r\n\t\t\t\tClick me\\n\\\r\n      \t\t</button>\\n\\\r\n\t\t</div >\\n\\\r\n\t);\\n\\\r\n}; ',\r\n\tII: 'export const UseStateII = (props) => {\\n\\\r\n\tconst [count, setCount] = useState(props.count);\\n\\\r\n\\n\\\r\n\treturn(\\n\\\r\n\t\t<div className = \"content\" >\\n\\\r\n\t\t\t<h4>UseState with props</h4>\\n\\\r\n\t\t\t<p>You clicked {count} times</p>\\n\\\r\n\t\t\t<button\\n\\\r\n\t\t\t\tclassName=\"button\"\\n\\\r\n\t\t\t\tonClick={() => setCount(count + 1)}>\\n\\\r\n\t\t\t\tClick me\\n\\\r\n      \t\t</button>\\n\\\r\n\t\t</div >\\n\\\r\n\t);\\n\\\r\n};',\r\n\tIII: 'export const UseStateIII = () => {\\n\\\r\n\tconst [count, setCount] = useState(0);\\n\\\r\n\\n\\\r\n\tconst updateCount = () => {\\n\\\r\n\t\tlet powerCount = (count + 1) * 2;\\n\\\r\n\t\tsetCount(count + powerCount);\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\treturn(\\n\\\r\n\t\t<div className = \"content\" >\\n\\\r\n\t\t\t<h4>UseState with function</h4>\\n\\\r\n\t\t\t<p>You clicked {count} times</p>\\n\\\r\n\t\t\t<button\\n\\\r\n\t\t\t\tclassName=\"button\"\\n\\\r\n\t\t\t\tonClick={() => updateCount()}>\\n\\\r\n\t\t\t\tClick me\\n\\\r\n      \t\t</button>\\n\\\r\n\t\t</div >\\n\\\r\n\t);\\n\\\r\n};',\r\n\tIV: 'export const UseStateIV = () => {\\n\\\r\n\tconst [count, setCount] = useState(0);\\n\\\r\n\tconst [factor, setFactor] = useState(1);\\n\\\r\n\\n\\\r\n\tconst factors = [1, 2, 3, 4, 5, 6, 7, 8, 9, \"ðŸ¦„\"];\\n\\\r\n\tconst operators = [\"+\", \"*\", \"-\", \"/\"];\\n\\\r\n\\n\\\r\n\tconst updateCount = {\\n\\\r\n\t\t\"+\": () => { setCount(count + factor); },\\n\\\r\n\t\t\"*\": () => { setCount(count * factor); },\\n\\\r\n\t\t\"-\": () => { setCount(count - factor); },\\n\\\r\n\t\t\"/\": () => { setCount(count / factor); }\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\tconst updateFactor = (factor) => {\\n\\\r\n\t\tif (factor === \"ðŸ¦„\") {\\n\\\r\n\t\t\treturn setFactor(Math.round(Math.random() * 1000, 0));\\n\\\r\n\t\t}\\n\\\r\n\t\treturn setFactor(factor);\\n\\\r\n\t};\\n\\\r\n\\n\\\r\n\treturn(\\n\\\r\n\t\t<div className = \"content\" >\\n\\\r\n\t\t\t<h4>UseState with multiple functions</h4>\\n\\\r\n\t\t\t<p>You clicked {count} times</p>\\n\\\r\n\t\t\t{\\n\\\r\n\t\t\tfactors.map(f => <button\\n\\\r\n\t\t\t\tclassName=\"button\"\\n\\\r\n\t\t\t\tkey={f}\\n\\\r\n\t\t\t\tonClick={() => updateFactor(f)}>\\n\\\r\n\t\t\t\t{f}\\n\\\r\n\t\t\t</button>)\\n\\\r\n}\\n\\\r\n\t< div >\\n\\\r\n\t{\\n\\\r\n\t\toperators.map(o => <button\\n\\\r\n\t\t\tclassName=\"button\"\\n\\\r\n\t\t\tkey={o}\\n\\\r\n\t\t\tonClick={() => updateCount[o]()} >\\n\\\r\n\t\t\t{o}{factor}\\n\\\r\n\t\t</button>)\\n\\\r\n\t}\\n\\\r\n\t\t\t</div >\\n\\\r\n\t<button\\n\\\r\n\t\tclassName=\"button\"\\n\\\r\n\t\tonClick={() => setCount(0)}>\\n\\\r\n\t\tReset\\n\\\r\n\t\t\t</button>\\n\\\r\n\t\t</div >\\n\\\r\n\t);\\n\\\r\n};'\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}